[
  {
    "objectID": "pretty plots/corr_heatmaps.html",
    "href": "pretty plots/corr_heatmaps.html",
    "title": "fastai notes",
    "section": "",
    "text": "using gene expression data\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import pearsonr\nimport matplotlib.pyplot as plt\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n\nge = pd.read_csv('data/breast_cancer/77_cancer_proteomes_CPTAC_itraq.csv')\nge = ge.drop(['gene_symbol', 'gene_name'], axis=1)\nge = ge.set_index('RefSeq_accession_number')\nge = ge.dropna()\nge\n\n\n\n  \n    \n      \n\n\n  \n    \n      \n      AO-A12D.01TCGA\n      C8-A131.01TCGA\n      AO-A12B.01TCGA\n      BH-A18Q.02TCGA\n      C8-A130.02TCGA\n      C8-A138.03TCGA\n      E2-A154.03TCGA\n      C8-A12L.04TCGA\n      A2-A0EX.04TCGA\n      AO-A12D.05TCGA\n      ...\n      AO-A12B.34TCGA\n      A2-A0SW.35TCGA\n      AO-A0JL.35TCGA\n      BH-A0BV.35TCGA\n      A2-A0YM.36TCGA\n      BH-A0C7.36TCGA\n      A2-A0SX.36TCGA\n      263d3f-I.CPTAC\n      blcdb9-I.CPTAC\n      c4155b-C.CPTAC\n    \n    \n      RefSeq_accession_number\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      NP_958782\n      1.096131\n      2.609943\n      -0.659828\n      0.195341\n      -0.494060\n      2.765081\n      0.862659\n      1.407570\n      1.185108\n      1.100688\n      ...\n      -0.963904\n      -0.487772\n      -0.106680\n      -0.065838\n      0.655850\n      -0.552212\n      -0.398560\n      0.598585\n      -0.191285\n      0.566975\n    \n    \n      NP_958785\n      1.111370\n      2.650422\n      -0.648742\n      0.215413\n      -0.503899\n      2.779709\n      0.870186\n      1.407570\n      1.192612\n      1.100688\n      ...\n      -0.938210\n      -0.487772\n      -0.106680\n      -0.055893\n      0.658143\n      -0.547749\n      -0.392601\n      0.606697\n      -0.183918\n      0.578702\n    \n    \n      NP_958786\n      1.111370\n      2.650422\n      -0.654285\n      0.215413\n      -0.500619\n      2.779709\n      0.870186\n      1.410312\n      1.188860\n      1.100688\n      ...\n      -0.943919\n      -0.487772\n      -0.106680\n      -0.065838\n      0.655850\n      -0.552212\n      -0.392601\n      0.603993\n      -0.186022\n      0.576747\n    \n    \n      NP_000436\n      1.107561\n      2.646374\n      -0.632113\n      0.205377\n      -0.510459\n      2.797995\n      0.866423\n      1.407570\n      1.185108\n      1.100688\n      ...\n      -0.935355\n      -0.487772\n      -0.106680\n      -0.055893\n      0.655850\n      -0.552212\n      -0.392601\n      0.603993\n      -0.186022\n      0.576747\n    \n    \n      NP_958781\n      1.115180\n      2.646374\n      -0.640428\n      0.215413\n      -0.503899\n      2.787023\n      0.870186\n      1.413053\n      1.200116\n      1.093358\n      ...\n      -0.935355\n      -0.503853\n      -0.106680\n      -0.062523\n      0.651264\n      -0.556675\n      -0.395581\n      0.603993\n      -0.167079\n      0.576747\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      XP_003846524\n      2.654339\n      0.715535\n      0.160528\n      -8.716757\n      0.388225\n      1.496053\n      -3.694801\n      -0.870670\n      -0.743348\n      3.383894\n      ...\n      1.300058\n      -4.105941\n      -3.620036\n      -2.598691\n      -2.462510\n      -5.083982\n      -4.792895\n      0.641854\n      -2.257159\n      -0.720976\n    \n    \n      NP_443073\n      -0.119194\n      1.144610\n      -1.203037\n      1.700762\n      0.371826\n      -1.718572\n      0.873949\n      -0.851479\n      0.787411\n      1.617433\n      ...\n      -1.377869\n      0.821200\n      1.494581\n      3.259359\n      -0.109983\n      -2.698723\n      -0.294287\n      0.420100\n      0.226521\n      -0.537262\n    \n    \n      NP_001004456\n      -2.024094\n      -0.166903\n      -3.071010\n      2.353112\n      -1.445222\n      0.197769\n      4.618518\n      1.914760\n      3.158587\n      -2.820708\n      ...\n      -2.785351\n      1.203922\n      -0.269946\n      1.233740\n      1.894022\n      -1.556297\n      0.724603\n      0.847382\n      0.520142\n      0.948084\n    \n    \n      NP_997625\n      1.637123\n      1.059605\n      1.648810\n      0.422827\n      0.493181\n      -2.354914\n      0.636856\n      0.763303\n      2.948483\n      2.390718\n      ...\n      2.150828\n      -1.352917\n      -0.605897\n      0.849171\n      1.135068\n      -1.978013\n      -1.745163\n      -1.099726\n      -0.592251\n      -0.595894\n    \n    \n      NP_003270\n      -0.252537\n      2.193011\n      -2.813263\n      0.389373\n      2.369266\n      -0.354459\n      -0.488396\n      0.415124\n      2.025525\n      -0.662108\n      ...\n      -2.885274\n      0.332346\n      0.741047\n      1.853693\n      2.325089\n      -3.999570\n      1.222131\n      -0.453395\n      -4.235684\n      -2.452576\n    \n  \n\n7994 rows × 83 columns\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\n\npd.df.corr(): Compute pairwise correlation of columns. (doc)\nscipy.stats.pearsonr(): Pearson correlation coefficient and p-value for testing non-correlation. [1] returns the pval for the corr. (doc)\nnp.eye(): Return a 2-D array with ones on the diagonal and zeros elsewhere.\npd.df.applymap(): Apply a function to a Dataframe elementwise. (doc)\n\nget the pairwise corr between columns\nget pairwise p-val of corr between columns, -np.eye() to set self corr p-vals to 0\nget the p-vals with significance for every cell of df\nget the annotation df by combining corr + p-val\n\n\ncorr_df = ge.corr()\npval = ge.corr(method=lambda x, y: pearsonr(x, y)[1]) - np.eye(*corr_df.shape)\np = pval.applymap(lambda x: ''.join(['*' for t in [.05, .01, .001] if x<=t]))\nannot_df = corr_df.round(2).astype(str) + p\n\n\nmask = np.triu(np.ones_like(corr_df.iloc[:20, :20], dtype=bool))\n\nplt.figure(figsize=(7, 7))\nsns.heatmap(corr_df.iloc[:20, :20], mask=mask,\n        cmap=cmap, center=0, fmt='s',\n        square=True, linewidths=0.5, \n        cbar_kws={\"shrink\": .3},\n        annot_kws={\"fontsize\":8},\n        vmin=-1, vmax=1)\nplt.xlabel('');\n# plt.savefig(fname='grouped_corr.jpg', bbox_inches='tight', dpi=300)\n\n\n\n\n\nCan choose only a few columns to visualize:\n\ntarget_genes = ['AO-A12D.01TCGA', 'C8-A131.01TCGA', 'AO-A12B.01TCGA', \n                'BH-A18Q.02TCGA', 'C8-A130.02TCGA', 'C8-A138.03TCGA', \n                'E2-A154.03TCGA', 'C8-A12L.04TCGA', 'A2-A0EX.04TCGA', \n                'AO-A12D.05TCGA']\n\nsmol_corr_df = corr_df.loc[target_genes, target_genes]\nsmol_annot_df = annot_df.loc[target_genes, target_genes]\n\nmask = np.triu(np.ones_like(smol_corr_df, dtype=bool))\n\nplt.figure(figsize=(8,8))\nsns.heatmap(smol_corr_df, annot=smol_annot_df, mask=mask,\n        cmap=cmap, center=0, fmt='s',\n        square=True, linewidths=0.5, \n        cbar_kws={\"shrink\": .3},\n        annot_kws={\"fontsize\":8},\n        vmin=-1, vmax=1)\nplt.xlabel('');\n# plt.savefig(fname='grouped_corr.jpg', bbox_inches='tight', dpi=300)\n\n\n\n\n\nThe above can look too crowded and cluttered; so a filter for absolute corr value makes for a claner looking plot.\n\nsmol_corr_df = corr_df.loc[target_genes, target_genes]\nsmol_annot_df = annot_df.loc[target_genes, target_genes]\n\ncorr_th = 0.2\nsmol_corr_df_ = smol_corr_df[np.abs(smol_corr_df) >= corr_th]\nsmol_annot_df_ = smol_corr_df_.round(2).fillna('').astype(str)\nmask = np.triu(np.ones_like(smol_corr_df_, dtype=bool))\nsns.heatmap(smol_corr_df_, annot=smol_annot_df_, mask=mask,\n        cmap=cmap, center=0, fmt='s',\n        square=True, linewidths=0.5, \n        cbar_kws={\"shrink\": .3},\n        annot_kws={\"fontsize\":8},\n        vmin=-1, vmax=1)\nplt.xlabel('')\n# plt.savefig(fname='grouped_corr.jpg', bbox_inches='tight', dpi=300)\n\nText(0.5, 15.0, '')\n\n\n\n\n\n\nQuestions:\n\nHow does pd implement the pair-wise correlation of columns?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes",
    "section": "",
    "text": "add new .ipynb to the relevant folder, e.g. blog\nadd path to _quarto.yml\ncommand line: quarto preview blog\n\nQ: what other file types can I add? e.g. md might be smaller.\n\nfastai idea list:\n\nL2 where J shows visualisations of gradient descent. Scale up + make pretty ones.\nL4 project: build tweet sentiment analysis thing with great visualizations\n\nhow would you build an app around this?\n\nget similar tweets?\ntweets around a topic at a given time? across time?\n\n\nL4, J mentions it’s a good idea to get a feel for what metrics look like. Create a notebook for that.\nL3- an app hosted on huggingface. Want to get lncrna related work up there.\n\ncould try and get other models up there as well?"
  },
  {
    "objectID": "blog/pda.html",
    "href": "blog/pda.html",
    "title": "fastai notes",
    "section": "",
    "text": "the book is available here\n\n\n\n\nThe Python Cookbook will be a good read to make up for gaps in my knowledge.\nPython is an interpretive language.\n\nvs. a compiled language, that needs a compiler to convert all instructions to machine code before they can be run\nwhat difference does this make?\n\nThis is a fun tidbit: The pandas name itself is derived from panel data, an econometrics term for multidimensional structured datasets, and a play on the phrase Python data analysis.\nNeed to check out the statsmodel library.\nIntrospection\n\nI love the use of this word in this context\nUsing some_function? or ?some_function, you can access the docstring\nMight be useful in my own work to prevent scrolling or opening up tabs\n\nReminder that lists are mutable and if you assign (bind) 2 variables to the same list, they’ll both change when you change one of them.\n\n\n\n\n\n\n\nTuples\n\nInteresting thing about tuples: the *rest is related to the **kwargs\n\n\n\nvalues = 1, 2, 3, 4, 5\na, b, *rest = values\nprint(a)\nprint(b)\nprint(*rest)\n\n1\n2\n3 4 5\n\n\n\nLists\n\nSome methods: append, insert, pop, remove, extend, sort\nQuote: insert is computationally expensive compared with append, because references to subsequent elements have to be shifted internally to make room for the new element. If you need to insert elements at both the beginning and end of a sequence, you may wish to explore collections.deque, a double-ended queue, which is optimized for this purpose and found in the Python Standard Library.\nx in list, x not in list syntax\n\nQuote: Checking whether a list contains a value is a lot slower than doing so with dictionaries and sets, as Python makes a linear scan across the values of the list, whereas it can check the others (based on hash tables) in constant time.\n\nQuote: Note that list concatenation by addition is a comparatively expensive operation since a new list must be created and the objects copied over. Using extend to append elements to an existing list, especially if you are building up a large list, is usually preferable.\nsort has a key argument:\n\n\n\nb = [\"saw\", \"small\", \"He\", \"foxes\", \"six\"]\nb.sort(key=len)\nb\n\n['He', 'saw', 'six', 'small', 'foxes']\n\n\n\n\nDictionaries\n\naka hash map or associative array\ndel, pop, update (merge 2 dicts),\ncreating dicts from sequences:\n\nWay 1: iterate over 2 sequences\nWay 2: Using tuples\n\n‘a dictionary is essentially a collection of 2-tuples’\n\n\n\n\n# Way 1\nmapping = {}\nfor key, value in zip(key_list, value_list):\n    mapping[key] = value\n\n# Way 2\ntuples = zip(range(5), reversed(range(5)))\nmapping = dict(tuples)\nmapping\n\n{0: 4, 1: 3, 2: 2, 3: 1, 4: 0}\n\n\n\nDictionaries contd.\n\nsetdefault is a thing\n\nas is defaultdict from collections module\n\ndictionary keys can be tuples as well as scalars (int, string, float)\n\nbasically any immutable data type\nthis means you can convert a list into a tuple and use it as a key, which is kinda neat\n\n\nSets\n\nhave some interesting methods e.g. a.difference_update(b) & a.symmetric_difference(b)\n\n\n\n\nzip pairs up elements of sequences (lists, tuples) to create a list of tuples:\n\n\ns1 = ['a', 'b', 'c']\ns2 = [1, 2, 3]\nlist(zip(s1, s2))\n\n[('a', 1), ('b', 2), ('c', 3)]\n\n\n\nIn addition to list comprehension, there’s also dict and tuple comprehension:\n\n\nstrings = [\"a\", \"as\", \"bat\", \"car\", \"dove\", \"python\"]\n# list\nprint([x.upper() for x in strings if len(x) > 2])\n# tuple\nprint({len(x) for x in strings})\n# dict\nprint({value: index for index, value in enumerate(strings)})\n\n['BAT', 'CAR', 'DOVE', 'PYTHON']\n{1, 2, 3, 4, 6}\n{'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}\n\n\n\nnested comprehension exists, but it isn’t as fun\n\n\n\n\n\nAs a rule of thumb, if you anticipate needing to repeat the same or very similar code more than once, it may be worth writing a reusable function. Functions can also help make your code more readable by giving a name to a group of Python statements.\n\n\nScopes\n\nFunctions are assigned local namespaces\n\nlocal namespace is destroyed after function finishes run\n\nFunctions can access higher or global namespaces\nglobal and nonlocal keywords for assigning variable inside a function to higher namespaces\n\nJeez, just look at the following example:\n\nWorks because functions are objects\n\n\n\nimport re\n\ndef clean_strings(strings):\n    result = []\n    for value in strings:\n        value = value.strip()\n        value = re.sub(\"[!#?]\", \"\", value)\n        value = value.title()\n        result.append(value)\n    return result\n\nstates = [\"   Alabama \", \"Georgia!\", \"Georgia\", \n          \"georgia\", \"FlOrIda\",\"south   carolina##\", \n          \"West virginia?\"]\nclean_strings(states)\n\n['Alabama',\n 'Georgia',\n 'Georgia',\n 'Georgia',\n 'Florida',\n 'South   Carolina',\n 'West Virginia']\n\n\n\n# alternative\ndef remove_punctuation(value):\n    return re.sub(\"[!#?]\", \"\", value)\n\n# all the ops you do on a string added to this list\nclean_ops = [str.strip, remove_punctuation, str.title]\n\ndef clean_strings_alt(strings, ops):\n    result = []\n    for value in strings:\n        for func in ops:\n            # apply those functions on your value\n            value = func(value)\n        result.append(value)\n    return result\n\nclean_strings_alt(states, clean_ops)\n\n['Alabama',\n 'Georgia',\n 'Georgia',\n 'Georgia',\n 'Florida',\n 'South   Carolina',\n 'West Virginia']\n\n\n\nmap is interesting\n\nmap applies a function to a sequence\nthis example also shows that you can pass functions to other functions as inputs\n\n\n\nprint(strings)\nset(map(len, strings))\n\n['a', 'as', 'bat', 'car', 'dove', 'python']\n\n\n{1, 2, 3, 4, 6}\n\n\n\nprint(states)\nlist(map(remove_punctuation, states))\n\n['   Alabama ', 'Georgia!', 'Georgia', 'georgia', 'FlOrIda', 'south   carolina##', 'West virginia?']\n\n\n['   Alabama ',\n 'Georgia',\n 'Georgia',\n 'georgia',\n 'FlOrIda',\n 'south   carolina',\n 'West virginia']\n\n\n\nAnonymous (lambda) functions\n\nfunctions with a single statement\nreturn some value\n\n\n\ndef apply_to_list(some_list, f):\n    return [f(x) for x in some_list]\n\nints = [4, 0, 1, 5, 6]\n\napply_to_list(ints, lambda x: x * 2)\n\n[8, 0, 2, 10, 12]\n\n\n\nstrings = [\"foo\", \"card\", \"bar\", \"aaaa\", \"abab\"]\nstrings.sort()\nstrings\n\n['aaaa', 'abab', 'bar', 'card', 'foo']\n\n\n\nstrings = [\"foo\", \"card\", \"bar\", \"aaaa\", \"abab\"]\nstrings.sort(key=lambda x: len(set(x))) #sort by num of unique chars in str\nstrings\n\n['aaaa', 'foo', 'abab', 'bar', 'card']\n\n\n\nGenerators\n\nitertools module\n\ngroupby, chain(*iterables), combinations(iterable, k), permutations(iterable, k), groupby(iterable[, keyfunc]), product(*iterables, repeat=1)\n\n\nError & exception handling\n\ntry/except is for when you want things to fail gracefully\n\n\n\nfloat(\"something\")\n\nValueError: ignored\n\n\n\ndef attempt_float(x):\n    try:\n        return float(x)\n    except:\n        return x\n\nattempt_float(\"something\")\n\n'something'\n\n\n\n# there are other types of error\n# e.g. type error\nfloat((1, 2))\n\nTypeError: ignored\n\n\n\n# might want to specify which error type to except, therefore:\ndef attempt_float(x):\n    try:\n        return float(x)\n    except ValueError:\n        return x\n\n# or a tuple of errors\ndef attempt_float(x):\n    try:\n        return float(x)\n    except (TypeError, ValueError):\n        return x\n\n\nfinally is for the final things that must happen regardless of what happens with try:\n\nf = open(path, mode=\"w\")\n\ntry:\n    write_to_file(f)\nfinally:\n    f.close()\n\nelse is for what happens if try succeeded:\n\nf = open(path, mode=\"w\")\n\ntry:\n    write_to_file(f)\nexcept:\n    print(\"Failed\")\nelse:\n    print(\"Succeeded\")\nfinally:\n    f.close()\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\n\nframe = pd.DataFrame(np.arange(9).reshape((3, 3)),\n                     index=[\"a\", \"c\", \"d\"],\n                     columns=[\"Ohio\", \"Texas\", \"California\"])\nframe\n\n\n\n  \n    \n      \n\n\n  \n    \n      \n      Ohio\n      Texas\n      California\n    \n  \n  \n    \n      a\n      0\n      1\n      2\n    \n    \n      c\n      3\n      4\n      5\n    \n    \n      d\n      6\n      7\n      8\n    \n  \n\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\n\n# this exists\nframe.loc[[\"a\", \"c\"], [\"California\", \"Texas\"]]\n\n\n\n  \n    \n      \n\n\n  \n    \n      \n      California\n      Texas\n    \n  \n  \n    \n      a\n      2\n      1\n    \n    \n      c\n      5\n      4"
  },
  {
    "objectID": "blog/devops.html",
    "href": "blog/devops.html",
    "title": "fastai notes",
    "section": "",
    "text": "Linters"
  },
  {
    "objectID": "blog/create_blog.html",
    "href": "blog/create_blog.html",
    "title": "fastai notes",
    "section": "",
    "text": "How to create a blog using quarto and github-pages\n\n\nHere I’m creating a repo called blog for all my blogging needs.\n\n\n\nDownload the repo to your local machine so you can add in files:\n\nI like using Github Desktop for this. But whatever works for you.\nHere’s a tutorial on how to download code from github (aka cloning repos from github)\n\n\n\n\nChoose the destination path (local path) where you want your repo:\n\nI’m choosing Documents/GitHub/blog\n\n\n\n\n\n\n\n\nHead over to https://quarto.org/docs/websites/\nI prefer setting things up using the terminal.\n\nAs the docs say, you need to do the follwing:\n\nbe in the parent folder of where your blog is. For me, this means being at Documents/GitHub\nrun the command to create quarto’s magic files in your blog: quarto create-project blog --type website\nrun quarto preview blog to view the preview of the built in website\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere, I remove (comment out) the blue navigation bar navbar and add a sidebar instead.\n\nSee the quarto docs on navbar and sidebar\n\nIn the sidebar, I create 2 sections: fastai and blog.\n\nUnder each section is contents where I put in the relative paths of notebooks I want to display under those sections.\nTo keep this organized, I’ve created two separate folders lessons and myblog\nWhenever I need to add a new notebook:\n\nI can just download the notebook from Colab (or Kaggle)\ndrop nb into the corresponding folder\nadd a line under the correct section pointing to the nb’s path\n\n\n\n\n\n\n\n\n\nUsing quarto preview blog in the terminal (as I did in the previous step, I can see what my website looks like:\n\nthe sidebar has 2 sections fastai and blog\n\nunder each is a rendered nb\n\n\n\n\n\n\n\n\nTo complete this step, I used github pages, publish command from the quarto documentation.\n\n\nI use github desktop to do git related things:\n\nCommit changes to main branch\nCreate a new branch called gh-pages\n\n\n\n\n\n\n\n\nThen go to github repo, check settings are okay. I didn’t need to make any changes here.\n\n\n\n\n\n\n\n\n\n\n\nMove to the main branch, push all changes to remote\n\n\n\n\n\n\n\n\n\nHere’s the quarto documentation\nThe rule seems to be that you make/push all changes in main branch. Use gh-pages branch only when you’re using the command quarto publish gh-pages\n\n\n\n\nThe final site looks like this:\n\nFrom the address bar, you see this is hosted on github now\n\n\n\n\nAaaand it’s done!\nYou can view the site at https://nabiafshan.github.io/blog/\nIt looks pretty good!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "lessons/01_what_is_that.html",
    "href": "lessons/01_what_is_that.html",
    "title": "1- What is that?",
    "section": "",
    "text": "Trying out the concepts taught in fastai lesson 1 with a new dataset.\nInspired by this Superman comic, I’m building a deep learning classifier to distinhuish between images of birds, planes and supermen."
  },
  {
    "objectID": "lessons/01_what_is_that.html#workflow",
    "href": "lessons/01_what_is_that.html#workflow",
    "title": "1- What is that?",
    "section": "Workflow",
    "text": "Workflow\nHere’s the process:\n\nChoose categories- bird, plane, superman\nDownload 1 image for each and check they’re ok\nDownload 30 images for each into directories named by category\nCheck images are valid\nDownload pre-trained model\nFeed dir of images into model, fine tune, check performance\n\n\n\n!pip install -Uqq fastai duckduckgo_search\n\n     |█████▏                          | 10 kB 24.3 MB/s eta 0:00:01     |██████████▍                     | 20 kB 15.9 MB/s eta 0:00:01     |███████████████▋                | 30 kB 20.8 MB/s eta 0:00:01     |████████████████████▉           | 40 kB 13.2 MB/s eta 0:00:01     |██████████████████████████      | 51 kB 7.1 MB/s eta 0:00:01     |███████████████████████████████▎| 61 kB 8.4 MB/s eta 0:00:01     |████████████████████████████████| 62 kB 1.5 MB/s \n     |███▍                            | 10 kB 25.6 MB/s eta 0:00:01     |██████▉                         | 20 kB 33.5 MB/s eta 0:00:01     |██████████▏                     | 30 kB 38.0 MB/s eta 0:00:01     |█████████████▋                  | 40 kB 43.0 MB/s eta 0:00:01     |█████████████████               | 51 kB 44.0 MB/s eta 0:00:01     |████████████████████▍           | 61 kB 47.6 MB/s eta 0:00:01     |███████████████████████▊        | 71 kB 50.3 MB/s eta 0:00:01     |███████████████████████████▏    | 81 kB 51.8 MB/s eta 0:00:01     |██████████████████████████████▌ | 92 kB 53.5 MB/s eta 0:00:01     |████████████████████████████████| 96 kB 6.5 MB/s \nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nflask 1.1.4 requires click<8.0,>=5.1, but you have click 8.1.3 which is incompatible.\n\n\n\nfrom duckduckgo_search import ddg_images\nfrom fastcore.all import *"
  },
  {
    "objectID": "lessons/01_what_is_that.html#data",
    "href": "lessons/01_what_is_that.html#data",
    "title": "1- What is that?",
    "section": "Data",
    "text": "Data\n\nSearching for images\n\nbird = ddg_images('bird', max_results=2)\n\n\nBird is a list of dicts\nwrap inside L\nuse .itemgot('image') on L to extract the urls only\n\n\nbird\n\n[{'title': 'Pair these bird events with Great Backyard Bird Count - pennlive.com',\n  'image': 'https://www.pennlive.com/resizer/UeXGnWaOE07lC4n_J5lJ0a1M-_M=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.pennlive.com/home/penn-media/width2048/img/entertainment_impact/photo/shutterstock-58364638jpg-6932548563f01558.jpg',\n  'thumbnail': 'https://tse1.mm.bing.net/th?id=OIP.tAh4IvhbxtzpJUCMwC-djQHaGe&pid=Api',\n  'url': 'https://www.pennlive.com/entertainment/2015/02/pair_these_bird_events_with_gr.html',\n  'height': 1118,\n  'width': 1280,\n  'source': 'Bing'},\n {'title': \"Help Count Birds for Science during Audubon's Annual Christmas Bird Count - Restore the ...\",\n  'image': 'https://www.mississippiriverdelta.org/files/2015/12/BUFH-wing-feathers.jpg',\n  'thumbnail': 'https://tse2.mm.bing.net/th?id=OIP.1xYUOvqR7iH9FMoKBawtIAHaF1&pid=Api',\n  'url': 'https://mississippiriverdelta.org/help-count-birds-for-science-during-audubons-annual-christmas-bird-count/',\n  'height': 1340,\n  'width': 1700,\n  'source': 'Bing'}]\n\n\n\nL(bird).itemgot('image')\n\n(#2) ['https://www.pennlive.com/resizer/UeXGnWaOE07lC4n_J5lJ0a1M-_M=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.pennlive.com/home/penn-media/width2048/img/entertainment_impact/photo/shutterstock-58364638jpg-6932548563f01558.jpg','https://www.mississippiriverdelta.org/files/2015/12/BUFH-wing-feathers.jpg']\n\n\nBuild search_images using these\n\ndef search_images(keyword, max_images=30):\n    return L(ddg_images(keyword, max_results=max_images)).itemgot('image')\n\n\nurl = search_images('flying bird', 1)\nurl\n\n(#1) ['http://1.bp.blogspot.com/-6anwlEoD-Ec/UmvgxLKbxsI/AAAAAAAAZhQ/z64F1RGv7iU/s1600/Flying+Birds+Wallpapers+%25283%2529.jpg']\n\n\n\n\nDownloading and viewing single images\n\nfrom fastdownload import download_url\ndownload_url(url[0], dest='bird.jpg', show_progress=False)\n\nPath('bird.jpg')\n\n\n\nfrom fastai.vision.all import *\nim = Image.open('bird.jpg')\nim.to_thumb(256,256)\n\n\n\n\n\ndownload_url(search_images('flying plane', 1)[0], dest='plane.jpg', show_progress=False)\nImage.open('plane.jpg').to_thumb(256, 256)\n\n\n\n\n\ndownload_url(search_images('flying superman', 1)[0], dest='superman.jpg', show_progress=False)\nImage.open('superman.jpg').to_thumb(256, 256)\n\n\n\n\n\n\nDownload many images\n\nimport os\n\n\nsearches = ['bird', 'plane', 'superman']\npath = Path('is_that_a')\n\nfor s in searches:\n    dest = (path/s)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'flying {s}'))\n    resize_images(path/s, max_size=400, dest=path/s)\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n0"
  },
  {
    "objectID": "lessons/01_what_is_that.html#fine-tune-model",
    "href": "lessons/01_what_is_that.html#fine-tune-model",
    "title": "1- What is that?",
    "section": "Fine-tune model",
    "text": "Fine-tune model\n\ndls = DataBlock(blocks=(ImageBlock, CategoryBlock), \n                get_items=get_image_files,\n                splitter=RandomSplitter(valid_pct=0.2, seed=42),\n                get_y=parent_label,\n                item_tfms=[Resize(192, method='squish')] \n                ).dataloaders(path, bs=32)\ndls.show_batch(max_n=12)\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\n/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n  f\"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, \"\n/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      2.054615\n      1.164085\n      0.352941\n      00:08\n    \n  \n\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      1.213407\n      0.438084\n      0.176471\n      00:12\n    \n    \n      1\n      0.745004\n      0.064237\n      0.000000\n      00:13\n    \n    \n      2\n      0.510461\n      0.036753\n      0.000000\n      00:13"
  },
  {
    "objectID": "lessons/01_what_is_that.html#evaluate",
    "href": "lessons/01_what_is_that.html#evaluate",
    "title": "1- What is that?",
    "section": "Evaluate",
    "text": "Evaluate\n\nis_that_a,_,probs = learn.predict(PILImage.create('bird.jpg'))\nprint(f\"That is a: {is_that_a}.\")\nprint(f\"Probability: {probs[0]:.4f}\")\n\nim = Image.open('bird.jpg')\nim.to_thumb(256,256)\n\n\n\n\n\n\n\n\nThat is a: bird.\nProbability: 0.9944\n\n\n\n\n\n\nis_that_a,_,probs = learn.predict(PILImage.create('plane.jpg'))\nprint(f\"That is a: {is_that_a}.\")\nprint(f\"Probability: {probs[1]:.4f}\")\n\nim = Image.open('plane.jpg')\nim.to_thumb(256,256)\n\n\n\n\n\n\n\n\nThat is a: plane.\nProbability: 0.9989\n\n\n\n\n\n\nis_that_a,_,probs = learn.predict(PILImage.create('superman.jpg'))\nprint(f\"That is a: {is_that_a}.\")\nprint(f\"Probability: {probs[2]:.4f}\")\n\nim = Image.open('superman.jpg')\nim.to_thumb(256,256)\n\n\n\n\n\n\n\n\nThat is a: superman.\nProbability: 0.9998"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "fastai notes",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  }
]