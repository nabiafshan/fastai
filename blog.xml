<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>fastai notes</title>
<link>https://nabiafshan.github.io/fastai/blog.html</link>
<atom:link href="https://nabiafshan.github.io/fastai/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Mon, 17 Oct 2022 20:29:24 GMT</lastBuildDate>
<item>
  <title>1- What is that?</title>
  <link>https://nabiafshan.github.io/fastai/lessons/01_what_is_that.html</link>
  <description><![CDATA[ 



<p>Trying out the concepts taught in <a href="https://course.fast.ai/Lessons/lesson1.html">fastai lesson 1</a> with a new dataset.</p>
<p>Inspired by this Superman comic, I’m building a deep learning classifier to distinhuish between images of birds, planes and supermen.</p>
<p><img src="https://nabiafshan.github.io/fastai/lessons/https:/morotsman.github.io/img/itsairframe.jpg" height="400"></p>
<div class="cell" data-outputid="7ee553ad-63e2-4b83-fb5a-aea21839a0cc" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pwd</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/content</code></pre>
</div>
</div>
<section id="workflow" class="level2">
<h2 class="anchored" data-anchor-id="workflow">Workflow</h2>
<p>Here’s the process:</p>
<ul>
<li>Choose categories- bird, plane, superman</li>
<li>Download 1 image for each and check they’re ok</li>
<li>Download 30 images for each into directories named by category</li>
<li>Check images are valid</li>
<li>Download pre-trained model</li>
<li>Feed dir of images into model, fine tune, check performance</li>
</ul>
<hr>
<div class="cell" data-outputid="4731b698-4800-4db4-9020-2dacd3ac736d" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>Uqq fastai duckduckgo_search</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     |█████▏                          | 10 kB 24.3 MB/s eta 0:00:01     |██████████▍                     | 20 kB 15.9 MB/s eta 0:00:01     |███████████████▋                | 30 kB 20.8 MB/s eta 0:00:01     |████████████████████▉           | 40 kB 13.2 MB/s eta 0:00:01     |██████████████████████████      | 51 kB 7.1 MB/s eta 0:00:01     |███████████████████████████████▎| 61 kB 8.4 MB/s eta 0:00:01     |████████████████████████████████| 62 kB 1.5 MB/s 
     |███▍                            | 10 kB 25.6 MB/s eta 0:00:01     |██████▉                         | 20 kB 33.5 MB/s eta 0:00:01     |██████████▏                     | 30 kB 38.0 MB/s eta 0:00:01     |█████████████▋                  | 40 kB 43.0 MB/s eta 0:00:01     |█████████████████               | 51 kB 44.0 MB/s eta 0:00:01     |████████████████████▍           | 61 kB 47.6 MB/s eta 0:00:01     |███████████████████████▊        | 71 kB 50.3 MB/s eta 0:00:01     |███████████████████████████▏    | 81 kB 51.8 MB/s eta 0:00:01     |██████████████████████████████▌ | 92 kB 53.5 MB/s eta 0:00:01     |████████████████████████████████| 96 kB 6.5 MB/s 
ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
flask 1.1.4 requires click&lt;8.0,&gt;=5.1, but you have click 8.1.3 which is incompatible.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> duckduckgo_search <span class="im" style="color: #00769E;">import</span> ddg_images</span>
<span id="cb5-2"><span class="im" style="color: #00769E;">from</span> fastcore.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<section id="searching-for-images" class="level3">
<h3 class="anchored" data-anchor-id="searching-for-images">Searching for images</h3>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">bird <span class="op" style="color: #5E5E5E;">=</span> ddg_images(<span class="st" style="color: #20794D;">'bird'</span>, max_results<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<ul>
<li>Bird is a list of dicts</li>
<li>wrap inside <a href="https://fastcore.fast.ai/foundation.html#l">L</a></li>
<li>use <code>.itemgot('image')</code> on L to extract the urls only</li>
</ul>
<div class="cell" data-outputid="cb1f4044-5ea6-4239-83c9-2863d3104a5d" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">bird</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>[{'title': 'Pair these bird events with Great Backyard Bird Count - pennlive.com',
  'image': 'https://www.pennlive.com/resizer/UeXGnWaOE07lC4n_J5lJ0a1M-_M=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.pennlive.com/home/penn-media/width2048/img/entertainment_impact/photo/shutterstock-58364638jpg-6932548563f01558.jpg',
  'thumbnail': 'https://tse1.mm.bing.net/th?id=OIP.tAh4IvhbxtzpJUCMwC-djQHaGe&amp;pid=Api',
  'url': 'https://www.pennlive.com/entertainment/2015/02/pair_these_bird_events_with_gr.html',
  'height': 1118,
  'width': 1280,
  'source': 'Bing'},
 {'title': "Help Count Birds for Science during Audubon's Annual Christmas Bird Count - Restore the ...",
  'image': 'https://www.mississippiriverdelta.org/files/2015/12/BUFH-wing-feathers.jpg',
  'thumbnail': 'https://tse2.mm.bing.net/th?id=OIP.1xYUOvqR7iH9FMoKBawtIAHaF1&amp;pid=Api',
  'url': 'https://mississippiriverdelta.org/help-count-birds-for-science-during-audubons-annual-christmas-bird-count/',
  'height': 1340,
  'width': 1700,
  'source': 'Bing'}]</code></pre>
</div>
</div>
<div class="cell" data-outputid="41bc6b5d-f076-49c6-c1a5-8e23f307dd4d" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">L(bird).itemgot(<span class="st" style="color: #20794D;">'image'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(#2) ['https://www.pennlive.com/resizer/UeXGnWaOE07lC4n_J5lJ0a1M-_M=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.pennlive.com/home/penn-media/width2048/img/entertainment_impact/photo/shutterstock-58364638jpg-6932548563f01558.jpg','https://www.mississippiriverdelta.org/files/2015/12/BUFH-wing-feathers.jpg']</code></pre>
</div>
</div>
<p>Build <code>search_images</code> using these</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">def</span> search_images(keyword, max_images<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>):</span>
<span id="cb11-2">    <span class="cf" style="color: #003B4F;">return</span> L(ddg_images(keyword, max_results<span class="op" style="color: #5E5E5E;">=</span>max_images)).itemgot(<span class="st" style="color: #20794D;">'image'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="efc75ab9-7af1-4912-d277-8cd5ee25936c" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">url <span class="op" style="color: #5E5E5E;">=</span> search_images(<span class="st" style="color: #20794D;">'flying bird'</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb12-2">url</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>(#1) ['http://1.bp.blogspot.com/-6anwlEoD-Ec/UmvgxLKbxsI/AAAAAAAAZhQ/z64F1RGv7iU/s1600/Flying+Birds+Wallpapers+%25283%2529.jpg']</code></pre>
</div>
</div>
</section>
<section id="downloading-and-viewing-single-images" class="level3">
<h3 class="anchored" data-anchor-id="downloading-and-viewing-single-images">Downloading and viewing single images</h3>
<div class="cell" data-outputid="4fc6ec14-e2ea-4073-c3ad-ff679e73b02d" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">from</span> fastdownload <span class="im" style="color: #00769E;">import</span> download_url</span>
<span id="cb14-2">download_url(url[<span class="dv" style="color: #AD0000;">0</span>], dest<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bird.jpg'</span>, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Path('bird.jpg')</code></pre>
</div>
</div>
<div class="cell" data-outputid="47c795ee-8e47-4afe-965d-72c07a485757" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb16-2">im <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'bird.jpg'</span>)</span>
<span id="cb16-3">im.to_thumb(<span class="dv" style="color: #AD0000;">256</span>,<span class="dv" style="color: #AD0000;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<p><img src="https://nabiafshan.github.io/fastai/lessons/01_what_is_that_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="6b6a7bdb-74c8-49d1-ce01-8ff9b39b38b6" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">download_url(search_images(<span class="st" style="color: #20794D;">'flying plane'</span>, <span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>], dest<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'plane.jpg'</span>, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb17-2">Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'plane.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;">256</span>, <span class="dv" style="color: #AD0000;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<p><img src="https://nabiafshan.github.io/fastai/lessons/01_what_is_that_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="e90a1254-8a41-4922-ac39-5d867262e814" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">download_url(search_images(<span class="st" style="color: #20794D;">'flying superman'</span>, <span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>], dest<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'superman.jpg'</span>, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb18-2">Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'superman.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;">256</span>, <span class="dv" style="color: #AD0000;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<p><img src="https://nabiafshan.github.io/fastai/lessons/01_what_is_that_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="download-many-images" class="level3">
<h3 class="anchored" data-anchor-id="download-many-images">Download many images</h3>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">import</span> os</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">searches <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'bird'</span>, <span class="st" style="color: #20794D;">'plane'</span>, <span class="st" style="color: #20794D;">'superman'</span>]</span>
<span id="cb20-2">path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'is_that_a'</span>)</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="cf" style="color: #003B4F;">for</span> s <span class="kw" style="color: #003B4F;">in</span> searches:</span>
<span id="cb20-5">    dest <span class="op" style="color: #5E5E5E;">=</span> (path<span class="op" style="color: #5E5E5E;">/</span>s)</span>
<span id="cb20-6">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, parents<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb20-7">    download_images(dest, urls<span class="op" style="color: #5E5E5E;">=</span>search_images(<span class="ss" style="color: #20794D;">f'flying </span><span class="sc" style="color: #5E5E5E;">{</span>s<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>))</span>
<span id="cb20-8">    resize_images(path<span class="op" style="color: #5E5E5E;">/</span>s, max_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">400</span>, dest<span class="op" style="color: #5E5E5E;">=</span>path<span class="op" style="color: #5E5E5E;">/</span>s)</span></code></pre></div>
</div>
<div class="cell" data-outputid="f467e13f-2150-4d69-c568-1b4b91210b2b" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">failed <span class="op" style="color: #5E5E5E;">=</span> verify_images(get_image_files(path))</span>
<span id="cb21-2">failed.<span class="bu" style="color: null;">map</span>(Path.unlink)</span>
<span id="cb21-3"><span class="bu" style="color: null;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>0</code></pre>
</div>
</div>
</section>
</section>
<section id="fine-tune-model" class="level2">
<h2 class="anchored" data-anchor-id="fine-tune-model">Fine-tune model</h2>
<div class="cell" data-outputid="6bd78b29-0bca-4b12-a036-c69a2db80de6" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">dls <span class="op" style="color: #5E5E5E;">=</span> DataBlock(blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, CategoryBlock), </span>
<span id="cb23-2">                get_items<span class="op" style="color: #5E5E5E;">=</span>get_image_files,</span>
<span id="cb23-3">                splitter<span class="op" style="color: #5E5E5E;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>),</span>
<span id="cb23-4">                get_y<span class="op" style="color: #5E5E5E;">=</span>parent_label,</span>
<span id="cb23-5">                item_tfms<span class="op" style="color: #5E5E5E;">=</span>[Resize(<span class="dv" style="color: #AD0000;">192</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>)] </span>
<span id="cb23-6">                ).dataloaders(path, bs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)</span>
<span id="cb23-7">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://nabiafshan.github.io/fastai/lessons/01_what_is_that_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="cba73d33-5815-4ca4-a27c-0d99abb19d7c" data-execution_count="17">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;">=</span>error_rate)</span>
<span id="cb24-2">learn.fine_tune(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.
  f"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, "
/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2bb9fbb45f2a49c2b15d0c6d8bec240a","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>2.054615</td>
      <td>1.164085</td>
      <td>0.352941</td>
      <td>00:08</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.213407</td>
      <td>0.438084</td>
      <td>0.176471</td>
      <td>00:12</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.745004</td>
      <td>0.064237</td>
      <td>0.000000</td>
      <td>00:13</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.510461</td>
      <td>0.036753</td>
      <td>0.000000</td>
      <td>00:13</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</section>
<section id="evaluate" class="level2">
<h2 class="anchored" data-anchor-id="evaluate">Evaluate</h2>
<div class="cell" data-outputid="ce3d3a84-1f7b-4221-a525-68fa90578b8e" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">is_that_a,_,probs <span class="op" style="color: #5E5E5E;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;">'bird.jpg'</span>))</span>
<span id="cb26-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"That is a: </span><span class="sc" style="color: #5E5E5E;">{</span>is_that_a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">."</span>)</span>
<span id="cb26-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Probability: </span><span class="sc" style="color: #5E5E5E;">{</span>probs[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb26-4"></span>
<span id="cb26-5">im <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'bird.jpg'</span>)</span>
<span id="cb26-6">im.to_thumb(<span class="dv" style="color: #AD0000;">256</span>,<span class="dv" style="color: #AD0000;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>That is a: bird.
Probability: 0.9944</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="21">
<p><img src="https://nabiafshan.github.io/fastai/lessons/01_what_is_that_files/figure-html/cell-19-output-4.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="6b082eeb-517c-4433-91de-ad290140afa3" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">is_that_a,_,probs <span class="op" style="color: #5E5E5E;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;">'plane.jpg'</span>))</span>
<span id="cb28-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"That is a: </span><span class="sc" style="color: #5E5E5E;">{</span>is_that_a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">."</span>)</span>
<span id="cb28-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Probability: </span><span class="sc" style="color: #5E5E5E;">{</span>probs[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb28-4"></span>
<span id="cb28-5">im <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'plane.jpg'</span>)</span>
<span id="cb28-6">im.to_thumb(<span class="dv" style="color: #AD0000;">256</span>,<span class="dv" style="color: #AD0000;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>That is a: plane.
Probability: 0.9989</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="22">
<p><img src="https://nabiafshan.github.io/fastai/lessons/01_what_is_that_files/figure-html/cell-20-output-4.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="295e6caa-ef2f-4c6a-aa9b-28e2720e13f2" data-execution_count="23">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">is_that_a,_,probs <span class="op" style="color: #5E5E5E;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;">'superman.jpg'</span>))</span>
<span id="cb30-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"That is a: </span><span class="sc" style="color: #5E5E5E;">{</span>is_that_a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">."</span>)</span>
<span id="cb30-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Probability: </span><span class="sc" style="color: #5E5E5E;">{</span>probs[<span class="dv" style="color: #AD0000;">2</span>]<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb30-4"></span>
<span id="cb30-5">im <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'superman.jpg'</span>)</span>
<span id="cb30-6">im.to_thumb(<span class="dv" style="color: #AD0000;">256</span>,<span class="dv" style="color: #AD0000;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>That is a: superman.
Probability: 0.9998</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="23">
<p><img src="https://nabiafshan.github.io/fastai/lessons/01_what_is_that_files/figure-html/cell-21-output-4.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://nabiafshan.github.io/fastai/lessons/01_what_is_that.html</guid>
  <pubDate>Mon, 17 Oct 2022 20:29:24 GMT</pubDate>
</item>
<item>
  <title>Quarto Basics</title>
  <link>https://nabiafshan.github.io/fastai/lessons/hello.html</link>
  <description><![CDATA[ 



<section id="polar-axis" class="level2">
<h2 class="anchored" data-anchor-id="polar-axis">Polar Axis</h2>
<p>For a demonstration of a line plot on a polar axis, see Figure&nbsp;1.</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">r <span class="op" style="color: #5E5E5E;">=</span> np.arange(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb1-5">theta <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> np.pi <span class="op" style="color: #5E5E5E;">*</span> r</span>
<span id="cb1-6">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(</span>
<span id="cb1-7">  subplot_kw <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'projection'</span>: <span class="st" style="color: #20794D;">'polar'</span>} </span>
<span id="cb1-8">)</span>
<span id="cb1-9">ax.plot(theta, r)</span>
<span id="cb1-10">ax.set_rticks([<span class="fl" style="color: #AD0000;">0.5</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">1.5</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb1-11">ax.grid(<span class="va" style="color: #111111;">True</span>)</span>
<span id="cb1-12">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-polar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://nabiafshan.github.io/fastai/lessons/hello_files/figure-html/fig-polar-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;1: A line plot on a polar axis</figcaption><p></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <guid>https://nabiafshan.github.io/fastai/lessons/hello.html</guid>
  <pubDate>Mon, 17 Oct 2022 20:29:24 GMT</pubDate>
</item>
</channel>
</rss>
